diff --git a/include/hardware/audio.h b/include/hardware/audio.h
index 190a4d8..797be5a 100644
--- a/include/hardware/audio.h
+++ b/include/hardware/audio.h
@@ -673,7 +673,7 @@ struct audio_hw_device {
                               audio_output_flags_t flags,
                               struct audio_config *config,
                               struct audio_stream_out **stream_out);
-#else
+#else 
     int (*open_output_stream)(struct audio_hw_device *dev, uint32_t devices,
                               int *format, uint32_t *channels,
                               uint32_t *sample_rate,
@@ -683,6 +683,24 @@ struct audio_hw_device {
     void (*close_output_stream)(struct audio_hw_device *dev,
                                 struct audio_stream_out* stream_out);
 
+#ifdef SPRD_HARDWARE
+    /** This method creates and opens the audio hardware output
+     *  for broadcast stream */
+    int (*open_broadcast_stream)(struct audio_hw_device *dev, uint32_t devices,
+                                 int format, uint32_t channels,
+                                 uint32_t sample_rate,
+                                 uint32_t audio_source,
+                                 struct audio_broadcast_stream **out);
+
+    void (*close_broadcast_stream)(struct audio_hw_device *dev,
+                                   struct audio_broadcast_stream *out);
+#endif
+
+#ifdef MTK_HARDWARE
+    int (*SetAudioData)(struct audio_hw_device *dev,int par1,size_t len, void *ptr);
+    int (*GetAudioData)(struct audio_hw_device *dev,int par1,size_t len, void *ptr);
+#endif
+
     /** This method creates and opens the audio hardware input stream */
 #ifndef ICS_AUDIO_BLOB
     int (*open_input_stream)(struct audio_hw_device *dev,
@@ -743,11 +761,6 @@ struct audio_hw_device {
     int (*listen_set_parameters)(struct audio_hw_device *dev,
                                  const char *kv_pairs);
 #endif
-
-#ifdef MTK_HARDWARE
-    int (*SetAudioData)(struct audio_hw_device *dev,int par1,size_t len, void *ptr);
-    int (*GetAudioData)(struct audio_hw_device *dev,int par1,size_t len, void *ptr);
-#endif
 };
 typedef struct audio_hw_device audio_hw_device_t;
 
diff --git a/include/hardware/audio_policy.h b/include/hardware/audio_policy.h
index bfaef3b..6fe2842 100644
--- a/include/hardware/audio_policy.h
+++ b/include/hardware/audio_policy.h
@@ -234,6 +234,12 @@ struct audio_policy {
     bool (*is_stream_active)(const struct audio_policy *pol,
             audio_stream_type_t stream,
             uint32_t in_past_ms);
+
+#ifdef SPRD_HARDWARE
+    /** SPRD Checks whether audio recording is going in AudioFlinger */
+    bool (*is_audio_recording)(const struct audio_policy *pol);
+#endif
+
 #ifndef ICS_AUDIO_BLOB
 #ifndef MR1_AUDIO_BLOB
     bool (*is_stream_active_remotely)(const struct audio_policy *pol,
diff --git a/include/hardware/bt_fm.h b/include/hardware/bt_fm.h
new file mode 100644
index 0000000..c0578b5
--- /dev/null
+++ b/include/hardware/bt_fm.h
@@ -0,0 +1,382 @@
+/************************************************************************************
+ *
+ *  Copyright (C) 2009-2012 Broadcom Corporation
+ *
+ *  This program is the proprietary software of Broadcom Corporation and/or its
+ *  licensors, and may only be used, duplicated, modified or distributed
+ *  pursuant to the terms and conditions of a separate, written license
+ *  agreement executed between you and Broadcom (an "Authorized License").
+ *  Except as set forth in an Authorized License, Broadcom grants no license
+ *  (express or implied), right to use, or waiver of any kind with respect to
+ *  the Software, and Broadcom expressly reserves all rights in and to the
+ *  Software and all intellectual property rights therein.
+ *  IF YOU HAVE NO AUTHORIZED LICENSE, THEN YOU HAVE NO RIGHT TO USE THIS
+ *  SOFTWARE IN ANY WAY, AND SHOULD IMMEDIATELY NOTIFY BROADCOM AND DISCONTINUE
+ *  ALL USE OF THE SOFTWARE.
+ *
+ *  Except as expressly set forth in the Authorized License,
+ *
+ *  1.     This program, including its structure, sequence and organization,
+ *         constitutes the valuable trade secrets of Broadcom, and you shall
+ *         use all reasonable efforts to protect the confidentiality thereof,
+ *         and to use this information only in connection with your use of
+ *         Broadcom integrated circuit products.
+ *
+ *  2.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, THE SOFTWARE IS PROVIDED
+ *         "AS IS" AND WITH ALL FAULTS AND BROADCOM MAKES NO PROMISES,
+ *         REPRESENTATIONS OR WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY,
+ *         OR OTHERWISE, WITH RESPECT TO THE SOFTWARE.  BROADCOM SPECIFICALLY
+ *         DISCLAIMS ANY AND ALL IMPLIED WARRANTIES OF TITLE, MERCHANTABILITY,
+ *         NONINFRINGEMENT, FITNESS FOR A PARTICULAR PURPOSE, LACK OF VIRUSES,
+ *         ACCURACY OR COMPLETENESS, QUIET ENJOYMENT, QUIET POSSESSION OR
+ *         CORRESPONDENCE TO DESCRIPTION. YOU ASSUME THE ENTIRE RISK ARISING OUT
+ *         OF USE OR PERFORMANCE OF THE SOFTWARE.
+ *
+ *  3.     TO THE MAXIMUM EXTENT PERMITTED BY LAW, IN NO EVENT SHALL BROADCOM OR
+ *         ITS LICENSORS BE LIABLE FOR
+ *         (i)   CONSEQUENTIAL, INCIDENTAL, SPECIAL, INDIRECT, OR EXEMPLARY
+ *               DAMAGES WHATSOEVER ARISING OUT OF OR IN ANY WAY RELATING TO
+ *               YOUR USE OF OR INABILITY TO USE THE SOFTWARE EVEN IF BROADCOM
+ *               HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES; OR
+ *         (ii)  ANY AMOUNT IN EXCESS OF THE AMOUNT ACTUALLY PAID FOR THE
+ *               SOFTWARE ITSELF OR U.S. $1, WHICHEVER IS GREATER. THESE
+ *               LIMITATIONS SHALL APPLY NOTWITHSTANDING ANY FAILURE OF
+ *               ESSENTIAL PURPOSE OF ANY LIMITED REMEDY.
+ *
+ ************************************************************************************/
+
+#ifndef ANDROID_INCLUDE_BT_FM_H
+#define ANDROID_INCLUDE_BT_FM_H
+
+__BEGIN_DECLS
+
+/* The input ranges for all the APIs will be as per the BTA FM input ranges and
+* these will be defined in FM Proxy in java layer for Fm app usage
+*/
+typedef unsigned char BOOLEAN;
+
+
+//These structures are mapped to the corresponding BTA fm stack structures
+typedef struct
+{
+    int          status;
+    unsigned char        data;
+    unsigned char        index;
+    char                 text[65];
+} btfm_rds_update_t;
+
+
+typedef struct
+{
+    unsigned char         content_type;
+    unsigned char         start;
+    unsigned char         len;
+} btfm_rds_rtp_tag_t;
+
+typedef struct
+{
+    BOOLEAN                  running;
+    unsigned char            tag_toggle;
+    unsigned char            tag_num;
+    btfm_rds_rtp_tag_t    tag[6];
+} btfm_rds_rtp_info_t;
+
+//add for engpc test
+typedef struct _FM_SIGNAL_PARAM_T
+{
+    unsigned char  nOperInd; 	// 	Tune: 	0: tune successful;
+                                //                 1: tune failure
+						//	Seek: 	0: seek out valid channel successful
+	                    //			1: seek out valid channel failure
+    unsigned char  nStereoInd;			// 	0: Stereo; Other: Mono;
+    unsigned short 	nRssi;  			// 	RSSI Value
+    unsigned int	nFreqValue; 		// 	Frequency, Unit:KHz
+    unsigned int	nPwrIndicator; 	    // 	Power indicator
+    unsigned int	nFreqOffset; 		// 	Frequency offset
+    unsigned int	nPilotDet; 			// 	pilot_det
+    unsigned int	nNoDacLpf; 			// 	no_dac_lpf
+} FM_SIGNAL_PARAM_T;
+
+
+/**
+ * Enable fm callback
+ */
+typedef void (* btfm_enable_callback)(int status);
+
+/**
+ * Disable fm callback
+ */
+typedef void (* btfm_disable_callback)(int status);
+
+/**
+ * Fm tune event callback
+ */
+typedef void (* btfm_tune_callback)(int status, int rssi, int snr, int freq);
+
+
+/**
+ * Fm mute event callback
+ */
+typedef void (* btfm_mute_callback)(int status, BOOLEAN isMute);
+
+/**
+ * Fm search event callback
+ */
+typedef void (* btfm_search_callback)(int status, int rssi, int snr, int freq);
+
+/**
+ * Fm search complete event callback
+ */
+typedef void (* btfm_search_complete_callback)(int status, int rssi, int snr, int freq);
+
+/**
+ * Fm af jump event  callback
+ */
+typedef void (* btfm_af_jump_callback)(int status, int rssi, int snr, int freq);
+
+/**
+ * Fm audio mode  callback
+ */
+typedef void (* btfm_audio_mode_callback)(int status, int audioMode);
+
+/**
+ * Fm audio path callback
+ */
+typedef void (* btfm_audio_path_callback)(int status, int audioPath);
+
+/**
+ * Fm audio data callback
+ */
+typedef void (* btfm_audio_data_callback)(int status, int rssi, int snr, int audioMode);
+
+/**
+ * Fm rds mode callback
+ */
+typedef void (* btfm_rds_mode_callback)(int status, BOOLEAN rdsOn, BOOLEAN afOn);
+
+/**
+ * Fm rds type callback
+ */
+typedef void (* btfm_rds_type_callback)(int status, int rdsType);
+
+/**
+ * Fm deempasis param callback
+ */
+typedef void (* btfm_deemphasis_callback)(int status, int timeConst);
+
+/**
+ * Fm scan step callback
+ */
+typedef void (* btfm_scan_step_callback)(int status, int scanStep);
+
+/**
+ * Fm region callback
+ */
+typedef void (* btfm_region_callback)(int status, int region);
+
+/**
+ * Fm noise floor level callback
+ */
+typedef void (* btfm_nfl_callback)(int status, int noiseFloor);
+
+/**
+ * Fm volume callback
+ */
+typedef void (* btfm_volume_callback)(int status, int volume);
+
+/**
+ * Fm rds data callback
+ */
+typedef void (* btfm_rds_data_callback)(int status, int dataType, int index,
+                    char *radioText);
+
+/**
+ * Fm rds data callback
+ */
+typedef void (* btfm_rtp_data_callback)( btfm_rds_rtp_info_t *rtpInfo);
+/**
+ * Fm read reg callback
+ */
+
+typedef void (* btfm_rssi_callback)(int status, int rssi);
+
+typedef void (* btfm_snr_callback)(int status, int snr);
+
+typedef void (* btfm_rf_mute_callback)(int status);
+typedef void (* btfm_read_reg_callback)(int status,int reg_data);
+/**
+ * Fm write reg callback
+ */
+
+typedef void (* btfm_write_reg_callback)(int status,int reg_data);
+/**
+ * Fm seek test callback
+ */
+
+typedef void (* btfm_seek_test_callback)(int status,FM_SIGNAL_PARAM_T *chnlinfo);
+
+/**
+ * Fm tune test callback
+ */
+
+typedef void (* btfm_tune_test_callback)(int status,FM_SIGNAL_PARAM_T *chnlinfo);
+
+
+
+/** BT-FM callback structure. */
+typedef struct {
+    /** set to sizeof(BtFmCallbacks) */
+    size_t      size;
+    btfm_enable_callback            enable_cb;
+    btfm_disable_callback           disable_cb;
+    btfm_tune_callback              tune_cb;
+    btfm_mute_callback              mute_cb;
+    btfm_search_callback            search_cb;
+    btfm_search_complete_callback   search_complete_cb;
+    btfm_af_jump_callback           af_jump_cb;
+    btfm_audio_mode_callback        audio_mode_cb;
+    btfm_audio_path_callback        audio_path_cb;
+    btfm_audio_data_callback        audio_data_cb;
+    btfm_rds_mode_callback          rds_mode_cb;
+    btfm_rds_type_callback          rds_type_cb;
+    btfm_deemphasis_callback        deemphasis_cb;
+    btfm_scan_step_callback         scan_step_cb;
+    btfm_region_callback            region_cb;
+    btfm_nfl_callback               nfl_cb;
+    btfm_volume_callback            volume_cb;
+    btfm_rds_data_callback          rds_data_cb;
+    btfm_rtp_data_callback          rtp_data_cb;
+#ifdef HAS_BLUETOOTH_SPRD
+    btfm_rssi_callback              rssi_cb;
+    btfm_snr_callback               snr_cb;
+    btfm_rf_mute_callback           rf_mute_cb;
+#endif
+} btfm_callbacks_t;
+
+
+typedef struct {
+    /** set to sizeof(BtFmtestCallbacks) */
+    size_t      size;
+    btfm_read_reg_callback          read_reg_cb;
+    btfm_write_reg_callback         write_reg_cb;
+	btfm_seek_test_callback         seek_test_cb;
+    btfm_tune_test_callback         tune_test_cb;
+} btfm_test_callbacks_t;
+
+/** Represents the standard BT-FM interface. */
+typedef struct {
+
+/** set to sizeof(bt_interface_t) */
+size_t size;
+/**
+ * Opens the interface and provides the callback routines
+ * to the implemenation of this interface.
+ */
+int (*init)(btfm_callbacks_t* callbacks );
+
+/** Enable Fm. */
+int (*enable)(int functionalityMask);
+
+/** Tune Fm. */
+int (*tune)(int freq);
+
+/** Mute/unmute Fm. */
+int (*mute)(BOOLEAN mute);
+
+/** Search Fm. */
+int (*search)(int scanMode, int rssiThresh, int condType, int CondValue);
+
+/** Search Fm.with frequency wrap */
+int (*combo_search)(int startFreq, int endFreq, int rssiThresh, int direction, int scanMode,
+                        BOOLEAN multiChannel, int condType, int condValue);
+
+/** Abort Search for Fm. */
+int (*search_abort)();
+
+/** Enable rds/af for Fm. */
+int (*set_rds_mode)(BOOLEAN rdsOn, BOOLEAN afOn);
+#ifdef HAS_BLUETOOTH_SPRD
+/** Enable rt/ps for Fm. */
+int (*set_rt_ps_mode)(BOOLEAN rtPsOn);
+
+/** Enable pi/ecc for Fm. */
+int (*set_pi_ecc_mode)(BOOLEAN piEccOn);
+#endif
+/** Set Rds type. */
+int (*set_rds_type)(int rdsType);
+
+/** Set audio mode */
+int (*set_audio_mode)(int audioMode);
+
+/** Set audio path. */
+int (*set_audio_path)(int audioPath);
+
+/** Set Fm region */
+int (*set_region)(int regionType);
+
+/** Set Fm Scan step */
+int (*set_scan_step)(int scanStep);
+
+/** Config de-emphasis param. */
+int (*config_deemphasis)(int timeType);
+
+/** Estimate noise floor. */
+int (*estimate_noise_floor)(int level);
+
+/** Reads audio quality of current station .Turn audio date live update on/off */
+int (*read_audio_quality)(BOOLEAN turnOn);
+
+/** Used to configure RSSI value polling interval */
+int (*config_signal_notification)(int time);
+
+/** Set fm volume. */
+int (*set_volume)(int volume);
+
+/** Set SNR thresh for search. */
+int (*set_search_criteria)(int value);
+
+/** Disable Fm. */
+int (*disable)(void);
+
+/** Closes the interface. */
+void (*cleanup)(void);
+#ifdef HAS_BLUETOOTH_SPRD
+/** GetRssi  . */
+int (*get_rssi)(void);
+
+/** Get SNR. */
+int (*get_snr)(void);
+
+/** Set COS Thresh for search. */
+int (*set_search_preset_quality)(int value);
+
+/** Set RFMute. */
+int (*set_rf_mute)(BOOLEAN rf_mute);
+
+/** Set frequency offset threthold */
+int (*set_frequency_offset_th)(int frequencyOffsetTh);
+
+/** Set pilot power threshold  */
+int (*set_pilot_power_th)(int pilotPowerTh);
+
+/** Set noise power threshold  */
+int (*set_noise_power_th)(int noisePowerTh);
+#endif
+/* read REG*/
+unsigned int (*read_reg)(unsigned int);
+/* wirte REG*/
+int (*write_reg)(unsigned int addr,int value);
+
+int (*test_init)(btfm_test_callbacks_t* callbacks);
+
+int (*seek_for_test)(int freq,int directions);
+
+int (*tune_for_test)(int freq);
+
+} btfm_interface_t;
+
+__END_DECLS
+
+#endif /* ANDROID_INCLUDE_BT_FM_H */
+
+
diff --git a/include/hardware/fm.h b/include/hardware/fm.h
new file mode 100644
index 0000000..28470e2
--- /dev/null
+++ b/include/hardware/fm.h
@@ -0,0 +1,54 @@
+/*
+ * Copyright (C) 2008 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef ANDROID_FM_INTERFACE_H
+#define ANDROID_FM_INTERFACE_H
+
+#include <stdint.h>
+#include <sys/cdefs.h>
+#include <sys/types.h>
+
+#include <hardware/hardware.h>
+
+__BEGIN_DECLS
+
+/**
+ * The id of this module
+ */
+#define FM_HARDWARE_MODULE_ID "fm"
+
+
+struct fm_device_t {
+    struct hw_device_t common;
+
+    /**
+     * Set the provided lights to the provided values.
+     *
+     * Returns: 0 on succes, error code on failure.
+     */
+    int (*getFreq)(struct fm_device_t* dev, int* freq);
+    int (*setFreq)(struct fm_device_t* dev, int freq);
+    int (*setControl)(struct fm_device_t* dev,int id, int value);
+    int (*startSearch)(struct fm_device_t* dev,int freq, int dir, int timeout, int reserve);
+    int (*cancelSearch)(struct fm_device_t*dev);
+    int (*getRssi)(struct fm_device_t* dev, int* rssi);
+};
+
+
+__END_DECLS
+
+#endif  // ANDROID_LIGHTS_INTERFACE_H
+
diff --git a/include/hardware/gralloc.h b/include/hardware/gralloc.h
index e83af21..4312d1c 100644
--- a/include/hardware/gralloc.h
+++ b/include/hardware/gralloc.h
@@ -139,6 +139,12 @@ enum {
     /* SEC Private usage , for Overlay path at HWC */
     GRALLOC_USAGE_HWC_HWOVERLAY         = 0x20000000,
 #endif
+
+#ifdef SPRD_HARDWARE
+    GRALLOC_USAGE_OVERLAY_BUFFER        =  0x01000000,
+    GRALLOC_USAGE_VIDEO_BUFFER          =  0x02000000,
+    GRALLOC_USAGE_CAMERA_BUFFER         =  0x04000000,
+#endif
 };
 
 enum {
